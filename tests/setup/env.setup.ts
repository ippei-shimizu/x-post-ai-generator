/**
 * Issue #24: Áµ±Âêà„ÉÜ„Çπ„Éà„Å®CI/CDÂü∫Áõ§ - Áí∞Â¢ÉÂ§âÊï∞„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
 *
 * „ÉÜ„Çπ„ÉàÂÆüË°åÂâç„ÅÆÁí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
 */

import { config } from "dotenv";
import { resolve } from "path";

// „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Åã„Çâ„ÅÆÁõ∏ÂØæ„Éë„Çπ
const rootDir = resolve(__dirname, "../../");

// Áí∞Â¢ÉÂà•„ÅÆ .env „Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„Åø
const envFiles = [".env.test.local", ".env.test", ".env.local", ".env"];

// Áí∞Â¢ÉÂ§âÊï∞Ë™≠„ÅøËæº„Åø
for (const envFile of envFiles) {
  const envPath = resolve(rootDir, envFile);
  config({ path: envPath });
}

// „ÉÜ„Çπ„ÉàÁî®Áí∞Â¢ÉÂ§âÊï∞„ÅÆ„Éá„Éï„Ç©„É´„ÉàÂÄ§Ë®≠ÂÆö
const testDefaults = {
  NODE_ENV: "test",

  // Supabase Ë®≠ÂÆö
  SUPABASE_URL: process.env.SUPABASE_URL || "http://localhost:54321",
  SUPABASE_SERVICE_ROLE_KEY:
    process.env.SUPABASE_SERVICE_ROLE_KEY || "test-service-role-key",
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || "test-anon-key",

  // JWT Ë®≠ÂÆö
  JWT_SECRET: process.env.JWT_SECRET || "test-jwt-secret-for-integration-tests",

  // NextAuth.js Ë®≠ÂÆö
  NEXTAUTH_URL: process.env.NEXTAUTH_URL || "http://localhost:3000",
  NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET || "test-nextauth-secret",

  // Google OAuth Ë®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÁî®„ÉÄ„Éü„ÉºÂÄ§Ôºâ
  GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID || "test-google-client-id",
  GOOGLE_CLIENT_SECRET:
    process.env.GOOGLE_CLIENT_SECRET || "test-google-client-secret",

  // OpenAI Ë®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÁî®„ÉÄ„Éü„ÉºÂÄ§Ôºâ
  OPENAI_API_KEY: process.env.OPENAI_API_KEY || "sk-test-openai-api-key",

  // AWS Ë®≠ÂÆö
  AWS_REGION: process.env.AWS_REGION || "ap-northeast-1",
  AWS_ACCESS_KEY_ID: process.env.AWS_ACCESS_KEY_ID || "test-access-key",
  AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY || "test-secret-key",

  // API „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
  FRONTEND_URL: process.env.FRONTEND_URL || "http://localhost:3000",
  BACKEND_API_URL: process.env.BACKEND_API_URL || "http://localhost:3001",

  // „Éá„Éº„Çø„Éô„Éº„ÇπË®≠ÂÆö
  DATABASE_URL:
    process.env.DATABASE_URL ||
    "postgresql://postgres:postgres@localhost:5432/test_db",

  // „É≠„Ç∞„É¨„Éô„É´
  LOG_LEVEL: process.env.LOG_LEVEL || "error",

  // „ÉÜ„Çπ„Éà„Éï„É©„Ç∞
  DISABLE_REAL_API_CALLS: process.env.DISABLE_REAL_API_CALLS || "true",
  MOCK_EXTERNAL_SERVICES: process.env.MOCK_EXTERNAL_SERVICES || "true",

  // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö
  TEST_TIMEOUT: process.env.TEST_TIMEOUT || "30000",
  API_TIMEOUT: process.env.API_TIMEOUT || "5000",

  // ‰∏¶ÂàóÂÆüË°åË®≠ÂÆö
  JEST_MAX_WORKERS: process.env.JEST_MAX_WORKERS || "2",
};

// „Éá„Éï„Ç©„É´„ÉàÂÄ§„ÇíÁí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆöÔºàÊó¢Â≠ò„ÅÆÂÄ§„ÅØ‰∏äÊõ∏„Åç„Åó„Å™„ÅÑÔºâ
Object.entries(testDefaults).forEach(([key, defaultValue]) => {
  if (!process.env[key]) {
    process.env[key] = defaultValue;
  }
});

// Êú¨Áï™Áí∞Â¢É„Åß„ÅÆË™§ÂÆüË°åÈò≤Ê≠¢
if (process.env.NODE_ENV === "production") {
  throw new Error(
    "üö® CRITICAL: Integration tests should never run in production environment!\n" +
      "Please check your NODE_ENV setting.",
  );
}

// Âç±Èô∫„Å™Ë®≠ÂÆöÂÄ§„ÅÆÊ§úË®º
const dangerousConfigs = [
  { key: "SUPABASE_URL", pattern: /supabase\.co$/, env: "production" },
  { key: "DATABASE_URL", pattern: /amazonaws\.com/, env: "production" },
  { key: "BACKEND_API_URL", pattern: /vercel\.app$/, env: "production" },
];

dangerousConfigs.forEach(({ key, pattern, env }) => {
  const value = process.env[key];
  if (value && pattern.test(value)) {
    console.warn(
      `‚ö†Ô∏è  WARNING: ${key} appears to point to ${env} environment: ${value}\n` +
        "Make sure you are using test environment configuration.",
    );
  }
});

// „ÉÜ„Çπ„ÉàÁí∞Â¢ÉÁ¢∫Ë™ç„É≠„Ç∞
console.log("üß™ Test environment configured:");
console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL}`);
console.log(`   FRONTEND_URL: ${process.env.FRONTEND_URL}`);
console.log(`   BACKEND_API_URL: ${process.env.BACKEND_API_URL}`);
console.log(`   MOCK_EXTERNAL_SERVICES: ${process.env.MOCK_EXTERNAL_SERVICES}`);

export {};
